# Generated by Django 4.2.7 on 2025-06-19 11:08

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account', models.TextField(help_text='Account name or identifier', verbose_name='Account')),
                ('need_monitor', models.BooleanField(default=True, help_text='Whether this account should be monitored', verbose_name='Need monitor')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
            ],
            options={
                'verbose_name': 'Account',
                'verbose_name_plural': 'Accounts',
                'db_table': 'accounts',
                'ordering': ['account'],
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Name of the company', verbose_name='Company name')),
                ('country', models.CharField(default='ru', help_text='Country code (ISO 3166-1 alpha-2)', max_length=2, verbose_name='Country')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
            ],
            options={
                'verbose_name': 'Company',
                'verbose_name_plural': 'Companies',
                'db_table': 'companies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Leak',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(help_text='Repository URL', max_length=255, unique=True, verbose_name='URL')),
                ('level', models.SmallIntegerField(choices=[(0, 'Low'), (1, 'Medium'), (2, 'High')], default=0, help_text='Severity level of the leak', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)], verbose_name='Level')),
                ('author_info', models.TextField(help_text='Information about repository author', verbose_name='Author info')),
                ('found_at', models.DateTimeField(help_text='When the leak was discovered', verbose_name='Found at')),
                ('created_at', models.DateTimeField(help_text='Repository creation date', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(blank=True, help_text='Repository last update date', null=True, verbose_name='Updated at')),
                ('approval', models.SmallIntegerField(blank=True, choices=[(0, 'Not seen'), (1, 'Leak approved'), (2, 'Leak not found')], help_text='Human verification status', null=True, verbose_name='Approval')),
                ('leak_type', models.TextField(help_text='Description of found leak types', verbose_name='Leak type')),
                ('result', models.SmallIntegerField(blank=True, choices=[(0, 'Leaks not found, add to exclude list'), (1, 'Leaks found, sent request to block'), (2, 'Leaks found, not yet sent request to block'), (3, 'Leaks found, blocked'), (4, 'Not set'), (5, 'Need more scan')], help_text='Processing result', null=True, verbose_name='Result')),
                ('done_by', models.SmallIntegerField(default=-1, help_text='ID of user who processed this leak', verbose_name='Done by')),
                ('is_false_positive', models.BooleanField(default=False, verbose_name='Is false positive')),
                ('priority', models.SmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Priority')),
                ('tags', models.JSONField(blank=True, default=list, help_text='Tags for categorization', verbose_name='Tags')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaks', to='leaks.company', verbose_name='Company')),
            ],
            options={
                'verbose_name': 'Leak',
                'verbose_name_plural': 'Leaks',
                'db_table': 'leak',
                'ordering': ['-found_at'],
            },
        ),
        migrations.CreateModel(
            name='RawReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_name', models.CharField(max_length=255, verbose_name='Report name')),
                ('raw_data', models.TextField(help_text='Raw scan results', verbose_name='Raw data')),
                ('ai_report', models.TextField(help_text='AI analysis of the scan results', verbose_name='AI report')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('leak', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='raw_reports', to='leaks.leak', verbose_name='Leak')),
            ],
            options={
                'verbose_name': 'Raw Report',
                'verbose_name_plural': 'Raw Reports',
                'db_table': 'raw_report',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LeakStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.PositiveIntegerField(default=0, help_text='Repository size', verbose_name='Size')),
                ('stargazers_count', models.PositiveIntegerField(default=0, verbose_name='Stargazers count')),
                ('has_issues', models.BooleanField(default=False, verbose_name='Has issues')),
                ('has_projects', models.BooleanField(default=False, verbose_name='Has projects')),
                ('has_downloads', models.BooleanField(default=False, verbose_name='Has downloads')),
                ('has_wiki', models.BooleanField(default=False, verbose_name='Has wiki')),
                ('has_pages', models.BooleanField(default=False, verbose_name='Has pages')),
                ('forks_count', models.PositiveIntegerField(default=0, verbose_name='Forks count')),
                ('open_issues_count', models.PositiveIntegerField(default=0, verbose_name='Open issues count')),
                ('subscribers_count', models.PositiveIntegerField(default=0, verbose_name='Subscribers count')),
                ('topics', models.TextField(blank=True, help_text='Repository topics', verbose_name='Topics')),
                ('contributors_count', models.IntegerField(default=0, verbose_name='Contributors count')),
                ('commits_count', models.IntegerField(default=0, verbose_name='Commits count')),
                ('commiters_count', models.IntegerField(default=0, verbose_name='Commiters count')),
                ('ai_result', models.IntegerField(default=0, help_text='AI analysis result', verbose_name='AI result')),
                ('description', models.TextField(blank=True, help_text='Repository description', null=True, verbose_name='Description')),
                ('leak', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stats', to='leaks.leak', verbose_name='Leak')),
            ],
            options={
                'verbose_name': 'Leak Statistics',
                'verbose_name_plural': 'Leak Statistics',
                'db_table': 'leak_stats',
            },
        ),
        migrations.CreateModel(
            name='Dork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dork', models.TextField(help_text='Search query for finding leaks', verbose_name='Dork')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dorks', to='leaks.company', verbose_name='Company')),
            ],
            options={
                'verbose_name': 'Dork',
                'verbose_name_plural': 'Dorks',
                'db_table': 'dorks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Commiter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commiter_name', models.TextField(verbose_name='Commiter name')),
                ('commiter_email', models.TextField(verbose_name='Commiter email')),
                ('need_monitor', models.BooleanField(default=True, verbose_name='Need monitor')),
                ('leak', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commiters', to='leaks.leak', verbose_name='Leak')),
                ('related_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commiters', to='leaks.account', verbose_name='Related account')),
            ],
            options={
                'verbose_name': 'Commiter',
                'verbose_name_plural': 'Commiters',
                'db_table': 'commiters',
            },
        ),
        migrations.AddField(
            model_name='account',
            name='related_company',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accounts', to='leaks.company', verbose_name='Related company'),
        ),
        migrations.CreateModel(
            name='RelatedAccountLeak',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_leaks', to='leaks.account', verbose_name='Account')),
                ('leak', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_accounts', to='leaks.leak', verbose_name='Leak')),
            ],
            options={
                'verbose_name': 'Related Account Leak',
                'verbose_name_plural': 'Related Account Leaks',
                'db_table': 'related_accounts_leaks',
                'unique_together': {('leak', 'account')},
            },
        ),
        migrations.AddIndex(
            model_name='leak',
            index=models.Index(fields=['level'], name='leak_level_4205f4_idx'),
        ),
        migrations.AddIndex(
            model_name='leak',
            index=models.Index(fields=['approval'], name='leak_approva_257cf5_idx'),
        ),
        migrations.AddIndex(
            model_name='leak',
            index=models.Index(fields=['result'], name='leak_result_deba19_idx'),
        ),
        migrations.AddIndex(
            model_name='leak',
            index=models.Index(fields=['company'], name='leak_company_585184_idx'),
        ),
        migrations.AddIndex(
            model_name='leak',
            index=models.Index(fields=['found_at'], name='leak_found_a_474d8d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='commiter',
            unique_together={('leak', 'commiter_email')},
        ),
    ]

version: '3.8'

services:
  # Redis для кэширования и очередей
  redis:
    image: redis:7-alpine
    container_name: gitsearch_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-gitsearch_redis_2024}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - gitsearch_network
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_passsword}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5

  # Django веб-приложение
  web:
    build: .
    container_name: gitsearch_web
    restart: unless-stopped
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DB_HOST=db
      - DB_PORT=3306
      - DB_NAME=${DB_NAME:-Gitsearch}
      - DB_USER=${DB_USER:-root}
      - DB_PASSWORD=${DB_PASSWORD:-changeme}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-gitsearch_redis_2024}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-gitsearch_redis_2024}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-gitsearch_redis_2024}@redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,0.0.0.0}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://127.0.0.1:3000}
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - reports_volume:/app/reports
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - gitsearch_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/common/health/"]
      timeout: 10s
      retries: 5

  # Nginx для статических файлов и проксирования
  nginx:
    image: nginx:alpine
    container_name: gitsearch_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume:/app/static:ro
      - media_volume:/app/media:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      #- ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - gitsearch_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      timeout: 10s
      retries: 3

  # Celery worker для фоновых задач
  celery:
    build: .
    container_name: gitsearch_celery
    restart: unless-stopped
    command: celery -A gitsearch_backend worker -l info
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DB_HOST=db
      - DB_PORT=3306
      - DB_NAME=${DB_NAME:-Gitsearch}
      - DB_USER=${DB_USER:-root}
      - DB_PASSWORD=${DB_PASSWORD:-changeme}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-gitsearch_redis_2024}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-gitsearch_redis_2024}@redis:6379/0
      - REDIS_URL=redis://:${REDIS_PASSWORD:-gitsearch_redis_2024}@redis:6379/0
    volumes:
      - media_volume:/app/media
      - reports_volume:/app/reports
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - gitsearch_network

  # Celery beat для запланированных задач
  celery-beat:
    build: .
    container_name: gitsearch_celery_beat
    restart: unless-stopped
    command: celery -A gitsearch_backend beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DB_HOST=db
      - DB_PORT=3306
      - DB_NAME=${DB_NAME:-Gitsearch}
      - DB_USER=${DB_USER:-root}
      - DB_PASSWORD=${DB_PASSWORD:-changeme}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-gitsearch_redis_2024}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-gitsearch_redis_2024}@redis:6379/0
      - REDIS_URL=redis://:${REDIS_PASSWORD:-gitsearch_redis_2024}@redis:6379/0
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - gitsearch_network

  # Flower для мониторинга Celery
  flower:
    build: .
    container_name: gitsearch_flower
    restart: unless-stopped
    command: celery -A gitsearch_backend flower --port=5555
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD:-gitsearch_redis_2024}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-gitsearch_redis_2024}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-gitsearch_redis_2024}@redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - gitsearch_network

  # Frontend заготовка (React)
  frontend:
    image: node:18-alpine
    container_name: gitsearch_frontend
    restart: unless-stopped
    working_dir: /app
    command: sh -c "npm install && npm start"
    environment:
      - REACT_APP_API_URL=${VITE_API_URL:-http://web:8000/api}
      - REACT_APP_WS_URL=${VITE_WS_URL:-ws://web:8000/ws}
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "3000:3000"
    networks:
      - gitsearch_network

  # Elasticsearch для поиска (опционально)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: gitsearch_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - gitsearch_network
    profiles:
      - search

  # Kibana для визуализации (опционально)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: gitsearch_kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - gitsearch_network
    profiles:
      - search

  # Prometheus для мониторинга (опционально)
  prometheus:
    image: prom/prometheus:latest
    container_name: gitsearch_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - gitsearch_network
    profiles:
      - monitoring

  # Grafana для дашбордов (опционально)
  grafana:
    image: grafana/grafana:latest
    container_name: gitsearch_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - gitsearch_network
    profiles:
      - monitoring

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  reports_volume:
    driver: local
  frontend_node_modules:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  gitsearch_network:
    external: true
    name: gitsearch_gitsearch_network


